[{"title":"博客介绍","url":"/2021/07/15/BlogReadme/","content":"<hr>\n<h2 id=\"我的博客\"><a href=\"#我的博客\" class=\"headerlink\" title=\"我的博客\"></a>我的博客</h2><p>大家好我是Summer2013，这是我的网名叫做Summer2013以为喜欢一张壁纸而得来的名称。 </p>\n<span id=\"more\"></span>  \n<p>这个壁纸是<a href=\"https://www.pixiv.net/\">Pixiv</a>网站找的，壁纸的发布日期为<code>2013-07-25</code>发布，那时候有是夏天取自夏天的英文，所以叫做<br>这是我网名的介绍。<img data-src=\"https://z3.ax1x.com/2021/07/15/Wm5vRg.jpg\" alt=\"Summer2013\">   </p>\n<hr>\n<h2 id=\"曾经喜欢的游戏\"><a href=\"#曾经喜欢的游戏\" class=\"headerlink\" title=\"曾经喜欢的游戏\"></a>曾经喜欢的游戏</h2><p>我曾经是一个是游戏狂，现在变成了一个技术狂，我曾是喜欢玩的游戏叫做：Minecarft，玩这个游戏让我认识了籽岷大大，籽岷大大每一次讲解模组或光影时，会把功能讲的清清楚楚，这让观众比较好理解，所以我才对籽岷大大最好的评价。   </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span>   </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span>   </span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">( <span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv [ ] )</span>   </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;   </span><br><span class=\"line\">        <span class=\"keyword\">char</span> *String = <span class=\"literal\">NULL</span>;   </span><br><span class=\"line\">        String  = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">char</span>));   </span><br><span class=\"line\">        String  = <span class=\"string\">&quot;Summer2013&quot;</span>;   </span><br><span class=\"line\">        <span class=\"built_in\">printf</span>( <span class=\"string\">&quot;%s\\n &quot;</span>, String );   </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["博客"],"tags":["博客介绍"]},{"title":"C语言数据类型","url":"/2021/07/19/C_C++/C-DataType-Max/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>C语言是一门面向过程的语言，也很适合新手上路，在学习C语言的时候第一章让我们接触了<code>printf()</code>函数打印了字符串，这是让我们认识的第一个函数，学完之后开始接触我们的数据类型。   </p>\n<span id=\"more\"></span>\n\n<p>C语言的数据类型有特别多，让我们巩固一下。   </p>\n<h3 id=\"C基本数据类型\"><a href=\"#C基本数据类型\" class=\"headerlink\" title=\"C基本数据类型\"></a>C基本数据类型</h3><ul>\n<li>基本数据类型   <ul>\n<li>数值类型<ul>\n<li>整形<ul>\n<li>短整形 <code>short</code></li>\n<li>整形   <code>int</code></li>\n<li>长整形 <code>long</code><ul>\n<li>精度整形(浮点型)<ul>\n<li>单精度型    <code>float</code></li>\n<li>双精度      <code>double</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>字符类型 <code>char</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>构造类型<ul>\n<li>数组   <code>[]</code> </li>\n<li>结构体 <code>struct</code></li>\n<li>共用体 <code>union</code></li>\n<li>枚举类型 <code>enum</code></li>\n</ul>\n</li>\n<li>指针类型 <code>*</code></li>\n<li>空类型 <code>void</code></li>\n</ul>\n<h3 id=\"数据类型的详细和其他组合数据类型\"><a href=\"#数据类型的详细和其他组合数据类型\" class=\"headerlink\" title=\"数据类型的详细和其他组合数据类型\"></a>数据类型的详细和其他组合数据类型</h3><ol start=\"2\">\n<li>short、int、long、char、float、double 这六个关键字代表C 语言里的六种基本数据类型。<br>在32位系统上，<code>short</code>内存大小2字节，<code>int</code>的内存大小4字节，<code>long</code>的内存大小4字节，<code>float</code>的内存大小4字节，<code>double</code>的内存大小8字节，<code>char</code>的内存大小1字节，当然在win32的<code>long</code>也是占用内存4个字节，要想long变成8字节必须再加一个<code>long long</code>。    </li>\n</ol>\n<p><code>long double</code>长双精度浮点型的取值范围： 1.18973e+4932 ~ 3.3621e-4932<br><code>unsigned char</code> 无符号字符型的取值范围: 0 ~ 255<br><code>short short</code>   短整型的取值范围:      0 ~ 32767<br>其中long double的取值范围比较长，<code>long double</code>用于取大型的数据比较适合一点，其他的就用<code>long</code> or <code>int</code>就可以了。<br>3. 打印输出这方面，printf输出格式有四种：<code>printf(&quot;字符串\\n&quot;);</code> <code>printf(&quot;输出控制符&quot;，输出参数);</code> <code>printf(&quot;输出控制符1 输出控制符2…&quot;, 输出参数1, 输出参数2, …);</code> <code>printf(&quot;输出控制符非输出控制符&quot;，输出参数)</code>,这里直接参考图片吧，懒得打太多字了。<img data-src=\"https://iknow-pic.cdn.bcebos.com/6a600c338744ebf879568a72d4f9d72a6059a75c\" alt=\"printf数据类型输出格式\"></p>\n","categories":["C/C++"],"tags":["基本数据类型"]},{"title":"Hello World","url":"/2021/07/14/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"winpcap和libpcap的安装使用","url":"/2021/07/22/network/pcap_config/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>网络编程是一门通信技术，将主机连起来就可以构成一个网络，将网络构成了一个互联网，IP地址是唯一识别每天机器的id，MAC地址也可以唯一标识一台主机，是物理地址不可改变，虽然也可以标识，但是寻找起来就很困难，所以显然没有IP地址的灵活方便。端口也叫通信接口，可以标识主机中的进程，即就是应用程序的代号，这是网络编程的前言。</p>\n<span id=\"more\"></span>\n<h2 id=\"winpcap的和libpcap的介绍\"><a href=\"#winpcap的和libpcap的介绍\" class=\"headerlink\" title=\"winpcap的和libpcap的介绍\"></a>winpcap的和libpcap的介绍</h2><p>winpcap和libpcap都是一样的开发包，win就能看的出来是给Windows平台用的，而libpcap则是给unix/linux平台用的，*libpcap是unix/linux平台下的网络数据包捕获函数包，大多数网络监控软件都以它为基础。Libpcap可以在绝大多数类unix平台下工作.*，而我们的winpcap就是我们windows平台下的libpcap，在win32平台开发pcap项目，能给win32程序提供了访问网络底层的能力。它用于windows下的网络编程。</p>\n<hr>\n<h2 id=\"winpcap的配置和使用\"><a href=\"#winpcap的配置和使用\" class=\"headerlink\" title=\"winpcap的配置和使用\"></a>winpcap的配置和使用</h2><ol>\n<li>首先先是安装winpcap的驱动程序，这个驱动程序非常重要，相当于硬件的接口，操作系统只有通过这个接口，才能控制硬件设备的工作，假如某设备的驱动程序未能正确安装，便不能正常工作。下载驱动程序  进入<a href=\"https://www.winpcap.org/\">winpcap</a>的官网，点击左边的<strong>Download Get WinPcap</strong>,然后在点击我们的<em>Installer for Windows</em>。安装驱动程序  其实安装没点什么技术含量，直接默认，下一步就可以了，注意如果你点击了，驱动的安装程序出现黄色感叹号说什么<em>a newer version of WinPcap</em>的话说明你安装了驱动。    </li>\n</ol>\n<hr>\n<h2 id=\"下载开发包\"><a href=\"#下载开发包\" class=\"headerlink\" title=\"下载开发包\"></a>下载开发包</h2><ol start=\"2\">\n<li>安装完成的驱动程序之后我们，就开始下载开发包，并适配到我们的vs2019里，我们现在下载开发包，鼠标移动到winpcap，再找到<em>Development</em>然后点击进去，点击上面的有个<em>Downaload Developer Pack</em>，或者点击旁边的<em>Download WinPcap 4.1.2 Developer’s Pack</em>下载完成之后，解压到合适的位置 下载完成之后解压到一个合适的位置并复制路径，等配置时好一点。你也可以参考我的路径，<code>E:\\Program Files (x86)\\DevPack\\WpdPack_4_1_2\\WpdPack</code>  </li>\n</ol>\n<hr>\n<h2 id=\"配置到vs2019\"><a href=\"#配置到vs2019\" class=\"headerlink\" title=\"配置到vs2019\"></a>配置到vs2019</h2><ol>\n<li>项目菜单-&gt;属性(快捷键Alt+F7)<img data-src=\"/images/pictures/pcap1.png\" alt=\"属性\">    </li>\n</ol>\n<hr>\n<ol start=\"2\">\n<li>包含目录和库目录分别加入winpcap的include和lib/x64目录。之前复制的路径起作用了，(这里是填写你配置的路径)<img data-src=\"/images/pictures/pcap2.png\" alt=\"包含\">     </li>\n</ol>\n<hr>\n<ol start=\"3\">\n<li> 点击C/C++，找到预处理器，再点击预处理器定义，把这三个预处理添加进去，<code>WPCAP HAVE_REMOTE XKEYCHEKC_H</code><img data-src=\"/images/pictures/pcap3.webp\" alt=\"预处理\"></li>\n</ol>\n<hr>\n<ol start=\"4\">\n<li>附加依赖项中分别加入，<code>ws2_32.lib wpcap.lib Packet.lib</code>, 三个库文件。<img data-src=\"/images/pictures/pcap4.png\" alt=\"库\"></li>\n</ol>\n<h2 id=\"Linux的安装libpcap\"><a href=\"#Linux的安装libpcap\" class=\"headerlink\" title=\"Linux的安装libpcap\"></a>Linux的安装libpcap</h2><ol>\n<li><p>Linux的种类特别多，比如说有基于Debian的，有基于RHEL，有基于Arch的，还有一个基于Linux的安卓，接下来我把全部的方法都试一遍。    </p>\n</li>\n<li><p>先介绍最简单的安装方法，也就是我们的依赖安装法      </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基于Debian的</span></span><br><span class=\"line\">apt install libpcap-dev</span><br><span class=\"line\"><span class=\"comment\"># 基于RHEL的</span></span><br><span class=\"line\">yum install libpcap-devel</span><br><span class=\"line\"><span class=\"comment\"># 基于arch的</span></span><br><span class=\"line\">pacman -S libpcap</span><br><span class=\"line\"><span class=\"comment\"># 忘了，还有Android的Termux</span></span><br><span class=\"line\">pkg i libpcap</span><br></pre></td></tr></table></figure></li>\n<li><p>通过源码安装<br>首先需要基本的需求的工具</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 基于Debian的</span></span><br><span class=\"line\">apt install wget cmake make gcc g++ gdb bsion flex tar </span><br><span class=\"line\"><span class=\"comment\"># 基于RHEL的</span></span><br><span class=\"line\">yum install wget cmake make flex bison gcc gcc-c++ gdb tar </span><br><span class=\"line\"><span class=\"comment\"># 基于arch的</span></span><br><span class=\"line\">pacman -S gcc gdb flex bison cmake make wget tar </span><br><span class=\"line\"><span class=\"comment\"># 忘了，还有Android的Termux</span></span><br><span class=\"line\">pkg i clang make cmake flex bison gdb wget tar</span><br></pre></td></tr></table></figure></li>\n<li><p>开始编译</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 下载libpcap</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /opt &amp;&amp; wget https://www.tcpdump.org/release/libpcap-1.10.1.tar.gz</span><br><span class=\"line\"><span class=\"comment\"># 解压包</span></span><br><span class=\"line\">tar -xf libpcap-1.10.1.tar &amp;&amp; <span class=\"built_in\">cd</span> libpcap-1.10.1</span><br><span class=\"line\"><span class=\"comment\"># 开始使用cmake编译</span></span><br><span class=\"line\">mkdir Debug &amp;&amp; <span class=\"built_in\">cd</span> Debug</span><br><span class=\"line\">cmake .. &amp;&amp; make</span><br><span class=\"line\"><span class=\"comment\"># 开始安装到/usr/local/include</span></span><br><span class=\"line\">make install</span><br><span class=\"line\"><span class=\"comment\"># 安装结束</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"实例代码\"><a href=\"#实例代码\" class=\"headerlink\" title=\"实例代码\"></a>实例代码</h2><ol>\n<li>查找当前的使用的接口(网卡)，请看下面代码    <figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pcap&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">( <span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv [ ] )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> errBuffer[PCAP_ERRBUF_SIZE + <span class=\"number\">1</span>] = &#123; <span class=\"number\">0</span> &#125;,</span><br><span class=\"line\">        *device = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 判断是否有正在被系统使用的网络接口 */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( device != <span class=\"literal\">NULL</span> ) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;look up device: %-2s\\n&quot;</span> , device );</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;errBuffer sign: %-2s\\n&quot;</span> , errBuffer );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* 屏幕暂停 */</span></span><br><span class=\"line\">        <span class=\"built_in\">fflush</span>(stdin);</span><br><span class=\"line\">        <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>打印出当前所有的网络接口。<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WIN32  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;pcap.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//#pragma comment(lib, &quot;wpcap.lib&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">( <span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv [ ] )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">pcap_if_t</span>* alldevs, * d;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">char</span> errbuf[PCAP_ERRBUF_SIZE];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">pcap_findalldevs</span>(&amp;alldevs, errbuf) == <span class=\"number\">-1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(stderr, <span class=\"string\">&quot;Error inpcap_findalldevs: %s\\n&quot;</span>, errbuf);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (d = alldevs; d; d = d-&gt;next)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d. %s&quot;</span>, ++i, d-&gt;name);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (d-&gt;description)  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; (%s)\\n&quot;</span>, d-&gt;description);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span>  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; (Nodescription available)\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\nNo interfaces found! Makesure WinPcap is installed.\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*We don&#x27;t need any more the device list. Free it */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">pcap_freealldevs</span>(alldevs);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>当然官方的写了一些的实例的项目，你可以去开发包里面找到来，试一下。      </li>\n<li>这个开发包，能写的东西特别多，大家可以去自己开发一个东西出来吧</li>\n</ol>\n","categories":["网络编程"],"tags":["网络抓包库"]},{"title":"C语言判断奇偶","url":"/2021/07/16/C_C++/C_C++judge_odd_even/","content":"<h2 id=\"C-语言如何判断奇数和偶数\"><a href=\"#C-语言如何判断奇数和偶数\" class=\"headerlink\" title=\"C 语言如何判断奇数和偶数\"></a>C 语言如何判断奇数和偶数</h2><hr>\n<p>学习C语言的过程中，难免会遇到一些数学问题，在这篇文章中我会提一下运算符的操作，让自己不会在忘记曾经学过的知识。   </p>\n<span id=\"more\"></span>\n<ol>\n<li>首先先判断奇数和偶数的区别，再用除法来除以那个数，就知道是否是奇数或者偶数。   </li>\n<li>奇数是 1 3 5 7 9,    偶数是 2 4 6 8 10,     还有一点要注意0既不是奇数也不是偶数。   </li>\n</ol>\n<p>我们知道了用这种方法来说实现，我们就来试试，32他是什么数呢，很显然他是偶数，我们可以那32来除以2是否余下0，如果等于0就是偶数，等于1就是奇数。<br>$32 / 2 = 16 ····· 0$ 偶数<br>$31 / 2 = 15 ····· 1$ 奇数   </p>\n<ol start=\"3\">\n<li>接下来用程序来实现<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  MAX \t100\t<span class=\"comment\">// 最大的循环次数</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  MOD \t2\t<span class=\"comment\">// 如果变量某数除以2等于0就是偶数，等于1就是奇数</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>  RETURN 4\t<span class=\"comment\">// 每打印4次换一次行</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">( <span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv [ ] )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; MAX + <span class=\"number\">1</span>; i++ )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ( i == <span class=\"number\">0</span> ) &#123;                 <span class=\"comment\">// 如果开头是0,因为0既不是奇数也不是偶数.</span></span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d不是奇数，也不是偶数&quot;</span>, i);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( i % MOD == <span class=\"number\">0</span>  ) &#123;     <span class=\"comment\">// 如果变量i除以2等于0,说明是偶数.</span></span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d是偶数  &quot;</span>, i);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( i % MOD == <span class=\"number\">1</span>  ) &#123;</span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d是奇数  &quot;</span>, i); <span class=\"comment\">// 如果变量i除以2等于1,说明是奇数.</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">if</span> ( i % RETURN == <span class=\"number\">0</span> ) &#123;           <span class=\"comment\">// 每打印4次，换行一次.</span></span><br><span class=\"line\">                        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        getchar();                              <span class=\"comment\">// 暂停防止闪退.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n这里使用了运算符是%取模运算，又叫求余运算符。</li>\n</ol>\n","categories":["C/C++"],"tags":["基本数据类型","运算符"]}]